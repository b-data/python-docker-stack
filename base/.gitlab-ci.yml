.env:
  variables:
    PYTHON_VERSION: "3.10.10"

.before-script-build: &before-script-build
  - |
    if [[ ! -z "$CI_BUILD_PLATFORMS" ]]; then
      export OS_ARCH=`echo $CI_BUILD_PLATFORMS | tr ' ' '\n' | \
      sed 's|\/||2' | sed 's|\/|-|' | tr '\n' ' '`
    fi
  - |
    export CI_APP_REPO=${CI_APP_REPO:-$CI_REGISTRY_IMAGE}
    if [[ $CI_COMMIT_BRANCH == "main" || $CI_COMMIT_BRANCH == "freeze-version" ]]; then
      export CI_APP_TAG=${CI_APP_TAG:-$PYTHON_VERSION}
    else
      export CI_APP_TAG=${CI_APP_TAG:-$CI_COMMIT_SHA}
    fi
  - >
    echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER
    --password-stdin $CI_REGISTRY
  - >
    export VERSION_MAJ_MIN=`echo $PYTHON_VERSION |
    sed -n "s|\([[:digit:]]\+\.[[:digit:]]\+\).*|\1|p"`
    
    export VERSION_MAJ=`echo $PYTHON_VERSION |
    sed -n "s|\([[:digit:]]\+\).*|\1|p"`

.build:
  image: registry.gitlab.b-data.ch/docker/docker-buildx:latest
  stage: build
  extends: .env
  services:
    - docker:dind
  variables:
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: "/certs"
  before_script:
    - *before-script-build
  retry: 2

.post:
  image: registry.gitlab.b-data.ch/docker/docker-buildx:latest
  stage: .post
  extends: .env

build:latest-linux-amd64:
  extends: .build
  tags:
    - arch:amd64
    - os:linux
  script:
    - >
      cd base && docker build --pull
      --build-arg BASE_IMAGE
      --build-arg BASE_IMAGE_TAG
      --build-arg BUILD_ON_IMAGE
      --build-arg PYTHON_VERSION
      --build-arg BUILD_START=$(date -uIseconds)
      -t $CI_APP_REPO:$CI_APP_TAG-linux-amd64
      -t $CI_APP_REPO:latest-linux-amd64
      -f latest.Dockerfile .
    - docker push -a $CI_APP_REPO
  rules:
    - if: $CI_COMMIT_BRANCH == "main" && $UPDATE_MODE != "true" && $CI_BUILD_PLATFORMS =~ /(linux\/amd64)/
      changes:
        - base/latest.Dockerfile

build:latest-linux-arm64v8:
  extends: .build
  tags:
    - arch:arm64/v8
    - os:linux
  script:
    - >
      cd base && docker build --pull
      --build-arg BASE_IMAGE
      --build-arg BASE_IMAGE_TAG
      --build-arg BUILD_ON_IMAGE
      --build-arg PYTHON_VERSION
      --build-arg BUILD_START=$(date -uIseconds)
      -t $CI_APP_REPO:$CI_APP_TAG-linux-arm64v8
      -t $CI_APP_REPO:latest-linux-arm64v8
      -f latest.Dockerfile .
    - docker push -a $CI_APP_REPO
  rules:
    - if: $CI_COMMIT_BRANCH == "main" && $UPDATE_MODE != "true" && $CI_BUILD_PLATFORMS =~ /(linux\/arm64\/v8)/
      changes:
        - base/latest.Dockerfile

build:version-linux-amd64:
  extends: .build
  tags:
    - arch:amd64
    - os:linux
  script:
    - >
      cd base && docker build --pull
      --build-arg BASE_IMAGE
      --build-arg BASE_IMAGE_TAG
      --build-arg BUILD_ON_IMAGE
      --build-arg BUILD_START=$(date -uIseconds)
      -t $CI_APP_REPO:$CI_APP_TAG-linux-amd64
      -f $PYTHON_VERSION.Dockerfile .
    - docker push $CI_APP_REPO:$CI_APP_TAG-linux-amd64
  rules:
    - if: $CI_COMMIT_BRANCH == "freeze-version" && $CI_PIPELINE_TRIGGERED && $CI_BUILD_PLATFORMS =~ /(linux\/amd64)/
      changes:
        - base/$PYTHON_VERSION.Dockerfile

build:version-linux-arm64v8:
  extends: .build
  tags:
    - arch:arm64/v8
    - os:linux
  script:
    - >
      cd base && docker build --pull
      --build-arg BASE_IMAGE
      --build-arg BASE_IMAGE_TAG
      --build-arg BUILD_ON_IMAGE
      --build-arg BUILD_START=$(date -uIseconds)
      -t $CI_APP_REPO:$CI_APP_TAG-linux-arm64v8
      -f $PYTHON_VERSION.Dockerfile .
    - docker push $CI_APP_REPO:$CI_APP_TAG-linux-arm64v8
  rules:
    - if: $CI_COMMIT_BRANCH == "freeze-version" && $CI_PIPELINE_TRIGGERED && $CI_BUILD_PLATFORMS =~ /(linux\/arm64\/v8)/
      changes:
        - base/$PYTHON_VERSION.Dockerfile

build-manifest:latest-linux-multiarch:
  extends: .build
  needs: ["build:latest-linux-amd64", "build:latest-linux-arm64v8"]
  script:
    - |
      for i in $OS_ARCH; do
        export CI_MANIFEST_LIST="$CI_MANIFEST_LIST $CI_APP_REPO:$CI_APP_TAG-$i"
      done
    - |
      docker manifest create $CI_APP_REPO:$CI_APP_TAG $CI_MANIFEST_LIST
      if echo $OS_ARCH | grep "linux-arm64v8" >/dev/null ; then
        docker manifest annotate --variant v8 $CI_APP_REPO:$CI_APP_TAG \
          $CI_APP_REPO:$CI_APP_TAG-linux-arm64v8
      fi
      docker manifest push $CI_APP_REPO:$CI_APP_TAG
    - |
      docker manifest create $CI_APP_REPO:latest $CI_MANIFEST_LIST
      if echo $OS_ARCH | grep "linux-arm64v8" >/dev/null ; then
        docker manifest annotate --variant v8 $CI_APP_REPO:latest \
          $CI_APP_REPO:$CI_APP_TAG-linux-arm64v8
      fi
      docker manifest push $CI_APP_REPO:latest
    - |
      docker manifest create $CI_APP_REPO:$VERSION_MAJ_MIN $CI_MANIFEST_LIST
      if echo $OS_ARCH | grep "linux-arm64v8" >/dev/null ; then
        docker manifest annotate --variant v8 $CI_APP_REPO:$VERSION_MAJ_MIN \
          $CI_APP_REPO:$CI_APP_TAG-linux-arm64v8
      fi
      docker manifest push $CI_APP_REPO:$VERSION_MAJ_MIN
    - |
      docker manifest create $CI_APP_REPO:$VERSION_MAJ $CI_MANIFEST_LIST
      if echo $OS_ARCH | grep "linux-arm64v8" >/dev/null ; then
        docker manifest annotate --variant v8 $CI_APP_REPO:$VERSION_MAJ \
          $CI_APP_REPO:$CI_APP_TAG-linux-arm64v8
      fi
      docker manifest push $CI_APP_REPO:$VERSION_MAJ
  rules:
    - if: $CI_COMMIT_BRANCH == "main" && $UPDATE_MODE != "true"
      changes:
        - base/latest.Dockerfile

build-manifest:version-linux-multiarch:
  extends: .build
  needs: ["build:version-linux-amd64", "build:version-linux-arm64v8"]
  script:
    - |
      for i in $OS_ARCH; do
        export CI_MANIFEST_LIST="$CI_MANIFEST_LIST $CI_APP_REPO:$CI_APP_TAG-$i"
      done
    - |
      docker manifest create $CI_APP_REPO:$CI_APP_TAG $CI_MANIFEST_LIST
      if echo $OS_ARCH | grep "linux-arm64v8" >/dev/null ; then
        docker manifest annotate --variant v8 $CI_APP_REPO:$CI_APP_TAG \
          $CI_APP_REPO:$CI_APP_TAG-linux-arm64v8
      fi
      docker manifest push $CI_APP_REPO:$CI_APP_TAG
    - |
      docker manifest create $CI_APP_REPO:$VERSION_MAJ_MIN $CI_MANIFEST_LIST
      if echo $OS_ARCH | grep "linux-arm64v8" >/dev/null ; then
        docker manifest annotate --variant v8 $CI_APP_REPO:$VERSION_MAJ_MIN \
          $CI_APP_REPO:$CI_APP_TAG-linux-arm64v8
      fi
      docker manifest push $CI_APP_REPO:$VERSION_MAJ_MIN
  rules:
    - if: $CI_COMMIT_BRANCH == "freeze-version" && $CI_PIPELINE_TRIGGERED
      changes:
        - base/$PYTHON_VERSION.Dockerfile

trigger-latest-build:
  extends: .post
  stage: .post
  needs: ["build-manifest:latest-linux-multiarch"]
  before_script:
    - apk upgrade --no-cache
    - apk add --update --no-cache curl
  script:
    - curl -X POST -F token=$PYTHON_SCIPY -F ref=main https://gitlab.b-data.ch/api/v4/projects/289/trigger/pipeline
  rules:
    - if: $CUDA_IMAGE
      when: never
    - if: $CI_COMMIT_BRANCH == "main" && $UPDATE_MODE != "true"
      changes:
        - base/latest.Dockerfile

trigger-version-build:
  extends: .post
  stage: .post
  needs: ["build-manifest:version-linux-multiarch"]
  before_script:
    - apk upgrade --no-cache
    - apk add --update --no-cache curl
  script:
    - curl -X POST -F token=$PYTHON_SCIPY -F ref=freeze-version https://gitlab.b-data.ch/api/v4/projects/289/trigger/pipeline
  rules:
    - if: $CUDA_IMAGE
      when: never
    - if: $CI_COMMIT_BRANCH == "freeze-version" && $CI_PIPELINE_TRIGGERED
      changes:
        - base/$PYTHON_VERSION.Dockerfile

trigger-latest-cuda-build:
  extends: .post
  stage: .post
  needs: ["build-manifest:latest-linux-multiarch"]
  before_script:
    - apk upgrade --no-cache
    - apk add --update --no-cache curl
  script:
    - curl -X POST -F token=$CUDA_PYTHON_SCIPY -F ref=main https://gitlab.b-data.ch/api/v4/projects/320/trigger/pipeline
  rules:
    - if: $CI_COMMIT_BRANCH == "main" && $UPDATE_MODE != "true" && $CUDA_IMAGE
      changes:
        - base/latest.Dockerfile

trigger-version-cuda-build:
  extends: .post
  stage: .post
  needs: ["build-manifest:version-linux-multiarch"]
  before_script:
    - apk upgrade --no-cache
    - apk add --update --no-cache curl
  script:
    - curl -X POST -F token=$CUDA_PYTHON_SCIPY -F ref=freeze-version https://gitlab.b-data.ch/api/v4/projects/320/trigger/pipeline
  rules:
    - if: $CI_COMMIT_BRANCH == "freeze-version" && $CI_PIPELINE_TRIGGERED && $CUDA_IMAGE
      changes:
        - base/$PYTHON_VERSION.Dockerfile
